https://stackoverflow.com/questions/62257356/how-to-use-filesink-in-deepstream-test-application-to-save-video


/* Added to save output to file */
+  nvvidconv1 = gst_element_factory_make ("nvvideoconvert", "nvvideo-converter1");
+  videoconvert = gst_element_factory_make ("videoconvert", "converter");
+  x264enc = gst_element_factory_make ("x264enc", "h264 encoder");
+  qtmux = gst_element_factory_make ("qtmux", "muxer");



diff --git a/deepstream-test2/deepstream_test2_app.c b/deepstream-test2/deepstream_test2_app.c
index 2b1ff34..c31441e 100644
--- a/deepstream-test2/deepstream_test2_app.c
+++ b/deepstream-test2/deepstream_test2_app.c
@@ -318,6 +318,16 @@ main (int argc, char *argv[])
   GstBus *bus = NULL;
   guint bus_watch_id = 0;
   GstPad *osd_sink_pad = NULL;
+  
+  /* Added to save output to file */
+  GstElement *nvvidconv1 = NULL,
+      *filter1 = NULL, *filter2 = NULL,
+      *filter3 = NULL,
+      *videoconvert = NULL,
+      *filter4 = NULL,
+      *x264enc = NULL,
+      *qtmux = NULL;
+  GstCaps *caps1 = NULL, *caps2 = NULL, *caps3 = NULL, *caps4 = NULL;
 
   /* Check input arguments */
   if (argc != 2) {
@@ -373,17 +383,35 @@ main (int argc, char *argv[])
   /* Create OSD to draw on the converted RGBA buffer */
   nvosd = gst_element_factory_make ("nvdsosd", "nv-onscreendisplay");
 
+  /* Added to save output to file */
+  nvvidconv1 = gst_element_factory_make ("nvvideoconvert", "nvvideo-converter1");
+  videoconvert = gst_element_factory_make ("videoconvert", "converter");
+  x264enc = gst_element_factory_make ("x264enc", "h264 encoder");
+  qtmux = gst_element_factory_make ("qtmux", "muxer");
+
   /* Finally render the osd output */
 #ifdef PLATFORM_TEGRA
   transform = gst_element_factory_make ("nvegltransform", "nvegl-transform");
 #endif
-  sink = gst_element_factory_make ("nveglglessink", "nvvideo-renderer");
+  sink = gst_element_factory_make ("filesink", "nvvideo-renderer");
+
+  /* caps filter for nvvidconv to convert NV12 to RGBA as nvosd expects input
+    * in RGBA format */
+  filter1 = gst_element_factory_make ("capsfilter", "filter1");
+  filter2 = gst_element_factory_make ("capsfilter", "filter2");
+  filter3 = gst_element_factory_make ("capsfilter", "filter3");
+  filter4 = gst_element_factory_make ("capsfilter", "filter4");
 
   if (!source || !h264parser || !decoder || !pgie ||
       !nvtracker || !sgie1 || !sgie2 || !sgie3 || !nvvidconv || !nvosd || !sink) {
     g_printerr ("One element could not be created. Exiting.\n");
     return -1;
   }
+  /* Added to test saving output to file */
+  if (!nvvidconv1 || !x264enc || !qtmux || !filter3 || !filter4) {
+    g_printerr ("One element could not be created. Exiting.\n");
+    return -1;
+  }
 
 #ifdef PLATFORM_TEGRA
   if(!transform) {
@@ -395,6 +423,9 @@ main (int argc, char *argv[])
   /* Set the input filename to the source element */
   g_object_set (G_OBJECT (source), "location", argv[1], NULL);
 
+  /* Added to save output to file */
+  g_object_set (G_OBJECT (sink), "location", "out.mp4", NULL);
+
   g_object_set (G_OBJECT (streammux), "batch-size", 1, NULL);
 
   g_object_set (G_OBJECT (streammux), "width", MUXER_OUTPUT_WIDTH, "height",
@@ -429,9 +460,24 @@ main (int argc, char *argv[])
 #else
   gst_bin_add_many (GST_BIN (pipeline),
       source, h264parser, decoder, streammux, pgie, nvtracker, sgie1, sgie2, sgie3,
-      nvvidconv, nvosd, sink, NULL);
+      filter1, nvvidconv, filter2, nvosd, nvvidconv1, filter3, videoconvert, filter4,
+      x264enc, qtmux, sink, NULL);
 #endif
 
+  /* Added to save output to file */
+  caps1 = gst_caps_from_string ("video/x-raw(memory:NVMM), format=NV12");
+  g_object_set (G_OBJECT (filter1), "caps", caps1, NULL);
+  gst_caps_unref (caps1);
+  caps2 = gst_caps_from_string ("video/x-raw(memory:NVMM), format=RGBA");
+  g_object_set (G_OBJECT (filter2), "caps", caps2, NULL);
+  gst_caps_unref (caps2);
+  caps3 = gst_caps_from_string ("video/x-raw, format=RGBA");
+  g_object_set (G_OBJECT (filter3), "caps", caps3, NULL);
+  gst_caps_unref (caps3);
+  caps4 = gst_caps_from_string ("video/x-raw, format=NV12");
+  g_object_set (G_OBJECT (filter4), "caps", caps4, NULL);
+  gst_caps_unref (caps4);
+
   GstPad *sinkpad, *srcpad;
   gchar pad_name_sink[16] = "sink_0";
   gchar pad_name_src[16] = "src";
@@ -470,7 +516,8 @@ main (int argc, char *argv[])
   }
 #else
   if (!gst_element_link_many (streammux, pgie, nvtracker, sgie1,
-      sgie2, sgie3, nvvidconv, nvosd, sink, NULL)) {
+      sgie2, sgie3, filter1, nvvidconv, filter2, nvosd, nvvidconv1, filter3,
+      videoconvert, filter4, x264enc, qtmux, sink, NULL)) {
     g_printerr ("Elements could not be linked. Exiting.\n");
     return -1;
   }



For deepstream-nvdsanalytics-test, pipeline would be:

gst_bin_add_many (GST_BIN (pipeline), pgie, nvtracker, nvdsanalytics, tiler,
                    filter1, nvvidconv, filter2, nvosd, nvvidconv1, filter3, videoconvert, filter4,
                    x264enc, qtmux, sink, NULL);
